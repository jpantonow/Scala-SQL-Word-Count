java.lang.IndexOutOfBoundsException: -1 is out of bounds (min 0, max 2)
occurred in the presentation compiler.

action parameters:
uri: file://<WORKSPACE>/src/main/scala/sqlite3/Banco.scala
text:
package sqlite3

import java.sql.Connection
import java.sql.SQLException
import java.sql.DriverManager
import java.sql.Statement
import java.sql.ResultSet
import java.sql.PreparedStatement
import java.io.PrintWriter
import java.io.File
import scala.io.Source
import components.Interaction

//Trait para obter o caminho do banco de dados
//e conectar com o driver jdbc
class Initialize(path_to_text: String, path_to_database: String){
    val url = s"jdbc:sqLite:$path_to_database"
    val book = scala.io.Source.fromFile(path_to_text)
    val stoptxt = scala.io.Source.fromFile("src/main/scala/files/stop-words.txt")
    val lines: List[String] = book.getLines().toList
    val stopwords: List[String] = stoptxt.getLines().toList
}

//Classe pra inicializar o banco de dados com as tabelas necessárias
class CreateTables(path_to_text: String, path_to_database: String) extends Initialize(path_to_text: String, path_to_database: String){
    
    //Estabelendo a conexão com o JDBC
    val conn = DriverManager.getConnection(url)

    //Desativando o autocommit
    conn.setAutoCommit(false)

    //Criando um PreparedStatement SQL

    var rt: PreparedStatement = null

    //Array que contém os comandos SQL de criação das tabelas
    val criar = Array(
        "CREATE TABLE IF NOT EXISTS documents (book TEXT PRIMARY KEY,num_words INTEGER," +
          "num_char INTEGER, avg_char-word INTEGER, longest_word TEXT, lenght-25 INTEGER);",
        "CREATE TABLE IF NOT EXISTS words(name TEXT PRIMARY KEY, frequency INTEGER);",
        "CREATE TABLE IF NOT EXISTS characters(char TEXT PRIMARY KEY, frequency INTEGER);"
    )

    //Percorre a array e adiciona cada comando ao statement SQL na "Pilha"
    for(command <- criar){
        rt = conn.prepareStatement(command)
        rt.execute()
    }

    //Fecha a conexão com o banco de dados
    rt.close()
    conn.commit()
    conn.close()
}

class Insert_Words(path_to_text: String, path_to_database: String) extends Initialize(path_to_text: String, path_to_database: String){

    //Estabelendo a conexão com o JDBC
    val conn = DriverManager.getConnection(url)

    //Convertendo a lista de linhas do livro em strings
    //separadas por espaço
    var text = lines.toString().split(" ")
    var update:String = ""
    var command: String = ""
    //Separando apenas as letras da string e convertendo em letra minúscula
    text = text.map(_.filter(_.isLetter))
    text = text.map(_.toLowerCase())
    text = text.sorted
    text = text.filter(s => s.size >= 2)

    //Iteração para adicionar palavra por palavra, caractere por caractere
    //Caso haja repeticao, incrementar a frequência

    //Criando um PreparedStatement
    var rt: PreparedStatement = null

    //Desativando o autocommit
    conn.setAutoCommit(false)

    for(n<-0 until text.length){
            if(!stopwords.contains(text(n))){
                for(i<-0 until text(n).length){
                    update = "UPDATE OR IGNORE characters "
                    update += "SET frequency = frequency + 1 WHERE char = "
                    update += "'" + text(n)(i).toString() + "';"
                    rt = conn.prepareStatement(update)
                    rt.execute()
                    command = "INSERT OR IGNORE INTO characters(char, frequency) VALUES ("
                    command += "'" + text(n)(i).toString() + "', "
                    command += "'1');" 
                    rt = conn.prepareStatement(command)
                    rt.execute()
                }
    
                update = "UPDATE OR IGNORE words "
                update += "SET frequency = frequency + 1 WHERE name = "
                update += "'" + text(n).toString() + "';"
                rt = conn.prepareStatement(update)
                rt.execute()
                
                command = "INSERT OR IGNORE INTO words(name, frequency) VALUES ("
                command += "'" + text(n).toString() + "', "
                command += "'1');" 
                rt = conn.prepareStatement(command)
                rt.execute()
            }
        }

    //Executa o statement e fecha a conexão com o banco de dados     
    rt.close()
    conn.commit()
    conn.close()
}
class Select_Most_Frequent(path_to_text: String, path_to_database: String) extends Initialize(path_to_text: String, path_to_database: String){
    
    def words: Unit = {
        val conn = DriverManager.getConnection(url)

        //Criando um statement SQL
        val select = conn.createStatement()

        //Comando para ordenar as palavras por ordem de frequência
        var command = "SELECT name,frequency, COUNT(*) as frequency "
        command += "FROM words GROUP BY name ORDER BY CAST(frequency AS int) DESC"

        //Coloca para executar a query
        val rs = select.executeQuery(command)
        var break: Int = 0
        //Pega todos os resultados da Query
        while(rs.next() && (break!=25)){
            var name = rs.getString("name")
            var frequency = rs.getInt("frequency")
            println(s"$name has appeared $frequency times.")
            break += 1
        }

        //Fecha a conexão com o banco de dados     
        select.close()
        conn.close()
    }

    def characters: Unit = {
        val conn = DriverManager.getConnection(url)

        //Criando um statement SQL
        val select = conn.createStatement()

        //Comando para ordenar as palavras por ordem de frequência
        var command = "SELECT char,frequency, COUNT(*) as frequency "
        command += "FROM characters GROUP BY char ORDER BY CAST(frequency AS int) DESC"

        //Coloca para executar a query
        val rs = select.executeQuery(command)
        var break: Int = 0
        //Pega todos os resultados da Query
        while(rs.next() && (break!=25)){
            var char = rs.getString("char")
            var frequency = rs.getInt("frequency")
            println(s"$char has appeared $frequency times.")
            break += 1
        }

        //Fecha a conexão com o banco de dados     
        select.close()
        conn.close()
        }
}

class Register_Documents(path_to_text: String, path_to_database: String, book_name: String) extends Initialize(path_to_text: String, path_to_database: String){
    def register: Unit = {
        val conn = DriverManager.getConnection(url)
        //Criando um PreparedStatement
        var rt: PreparedStatement = null
        //Desativando o autocommit
        conn.setAutoCommit(false)
        var register: String = ""
        register = "INSERT OR IGNORE INTO documents(book) VALUES("
        register += "'" + book_name + "');"
        rt = conn.prepareStatement(register)
        rt.execute()   
    }
    def count_words: Unit = {
        val conn = DriverManager.getConnection(url)
        val select_all = conn.
        register = "SELECT COUNT(name) from words;"
        rt = conn.prepareStatement(register)
        rt.execute()
        rt.next     
    }
    def average: Unit = {

    }
}
//Classe para exportar words e characters em arquivos csv
class Export_to_CSV (path_to_text: String, path_to_database: String, book_name: String) extends Initialize(path_to_text: String, path_to_database: String){
    export_words
    export_characters

    def export_words: Unit = {
        var Export = new PrintWriter(new File("src/main/scala/spreadsheets/" + book_name + "-words.csv"))
        var sb: StringBuilder = new StringBuilder()

        //Estabelendo a conexão com o JDBC
        val conn = DriverManager.getConnection(url)
        //Desativando o autocommit
        conn.setAutoCommit(false)

        var query: String = "SELECT *, COUNT(*) as frequency "
        query += "FROM words GROUP BY name ORDER BY CAST(frequency AS int) DESC"
        var rt: PreparedStatement = conn.prepareStatement(query)
        var rs = rt.executeQuery()
        sb.append("name" + "," + "frequency" + "\r\n")
        while(rs.next()){
            sb.append(rs.getString("name"))
            sb.append(",")
            sb.append(rs.getString("frequency"))
            sb.append("\r\n")
        }

        Export.write(sb.toString())
        Export.close()
    }
    
    def export_characters: Unit = {
        var Export = new PrintWriter(new File("src/main/scala/spreadsheets/" + book_name + "-characters.csv"))
        var sb: StringBuilder = new StringBuilder()

        //Estabelendo a conexão com o JDBC
        val conn = DriverManager.getConnection(url)
        //Desativando o autocommit
        conn.setAutoCommit(false)

        var query: String = "SELECT *, COUNT(*) as frequency "
        query += "FROM characters GROUP BY char ORDER BY CAST(frequency AS int) DESC"
        var rt: PreparedStatement = conn.prepareStatement(query)
        var rs = rt.executeQuery()
        sb.append("character" + "," + "frequency" + "\r\n")
        while(rs.next()){
            sb.append(rs.getString("char"))
            sb.append(",")
            sb.append(rs.getString("frequency"))
            sb.append("\r\n")
        }

        Export.write(sb.toString())
        Export.close()
    }
    
}



error stacktrace:
scala.collection.mutable.ArrayBuffer.apply(ArrayBuffer.scala:91)
	scala.reflect.internal.Types$Type.findMemberInternal$1(Types.scala:1042)
	scala.reflect.internal.Types$Type.findMember(Types.scala:1047)
	scala.reflect.internal.Types$Type.memberBasedOnName(Types.scala:673)
	scala.reflect.internal.Types$Type.member(Types.scala:637)
	scala.tools.nsc.typechecker.Contexts$SymbolLookup.apply(Contexts.scala:1401)
	scala.tools.nsc.typechecker.Contexts$Context.lookupSymbol(Contexts.scala:1283)
	scala.tools.nsc.typechecker.Typers$Typer.typedIdent$2(Typers.scala:5470)
	scala.tools.nsc.typechecker.Typers$Typer.typedIdentOrWildcard$1(Typers.scala:5522)
	scala.tools.nsc.typechecker.Typers$Typer.typed1(Typers.scala:5983)
	scala.tools.nsc.typechecker.Typers$Typer.typed(Typers.scala:6041)
	scala.tools.nsc.typechecker.Typers$Typer.typedType(Typers.scala:6236)
	scala.tools.nsc.typechecker.Typers$Typer.typedType(Typers.scala:6239)
	scala.tools.nsc.typechecker.Namers$Namer.valDefSig(Namers.scala:1761)
	scala.tools.nsc.typechecker.Namers$Namer.memberSig(Namers.scala:1935)
	scala.tools.nsc.typechecker.Namers$Namer.typeSig(Namers.scala:1885)
	scala.tools.nsc.typechecker.Namers$Namer$MonoTypeCompleter.completeImpl(Namers.scala:885)
	scala.tools.nsc.typechecker.Namers$LockingTypeCompleter.complete(Namers.scala:2083)
	scala.tools.nsc.typechecker.Namers$LockingTypeCompleter.complete$(Namers.scala:2081)
	scala.tools.nsc.typechecker.Namers$TypeCompleterBase.complete(Namers.scala:2076)
	scala.reflect.internal.Symbols$Symbol.completeInfo(Symbols.scala:1561)
	scala.reflect.internal.Symbols$Symbol.info(Symbols.scala:1533)
	scala.tools.nsc.typechecker.Namers$DependentTypeChecker.$anonfun$check$2(Namers.scala:2161)
	scala.tools.nsc.typechecker.Namers$DependentTypeChecker.$anonfun$check$1(Namers.scala:2160)
	scala.tools.nsc.typechecker.Namers$DependentTypeChecker.check(Namers.scala:2159)
	scala.tools.nsc.typechecker.Namers$Namer.methodSig(Namers.scala:1450)
	scala.tools.nsc.typechecker.Namers$Namer.memberSig(Namers.scala:1934)
	scala.tools.nsc.typechecker.Namers$Namer.typeSig(Namers.scala:1885)
	scala.tools.nsc.typechecker.Namers$Namer$AccessorTypeCompleter.completeImpl(Namers.scala:1004)
	scala.tools.nsc.typechecker.Namers$LockingTypeCompleter.complete(Namers.scala:2083)
	scala.tools.nsc.typechecker.Namers$LockingTypeCompleter.complete$(Namers.scala:2081)
	scala.tools.nsc.typechecker.Namers$TypeCompleterBase.complete(Namers.scala:2076)
	scala.reflect.internal.Symbols$Symbol.completeInfo(Symbols.scala:1561)
	scala.reflect.internal.Symbols$Symbol.info(Symbols.scala:1533)
	scala.reflect.internal.Symbols$Symbol.cookJavaRawInfo(Symbols.scala:1749)
	scala.tools.nsc.typechecker.Infer$Inferencer.checkAccessible(Infer.scala:302)
	scala.tools.nsc.typechecker.Typers$Typer.makeAccessible(Typers.scala:577)
	scala.tools.nsc.typechecker.Typers$Typer.$anonfun$typed1$62(Typers.scala:5343)
	scala.tools.nsc.typechecker.Typers$Typer.silent(Typers.scala:712)
	scala.tools.nsc.typechecker.Typers$Typer.typedSelect$1(Typers.scala:5343)
	scala.tools.nsc.typechecker.Typers$Typer.typedSelectOrSuperCall$1(Typers.scala:5411)
	scala.tools.nsc.typechecker.Typers$Typer.typed1(Typers.scala:5986)
	scala.tools.nsc.typechecker.Typers$Typer.typed(Typers.scala:6041)
	scala.tools.nsc.typechecker.Typers$Typer.$anonfun$typed1$41(Typers.scala:5074)
	scala.tools.nsc.typechecker.Typers$Typer.silent(Typers.scala:698)
	scala.tools.nsc.typechecker.Typers$Typer.normalTypedApply$1(Typers.scala:5076)
	scala.tools.nsc.typechecker.Typers$Typer.typedApply$1(Typers.scala:5104)
	scala.tools.nsc.typechecker.Typers$Typer.typed1(Typers.scala:5985)
	scala.tools.nsc.typechecker.Typers$Typer.typed(Typers.scala:6041)
	scala.tools.nsc.typechecker.Typers$Typer.setterRewrite$1(Typers.scala:4689)
	scala.tools.nsc.typechecker.Typers$Typer.typedAssign$1(Typers.scala:4694)
	scala.tools.nsc.typechecker.Typers$Typer.typedOutsidePatternMode$1(Typers.scala:5966)
	scala.tools.nsc.typechecker.Typers$Typer.typed1(Typers.scala:5995)
	scala.tools.nsc.typechecker.Typers$Typer.typed(Typers.scala:6041)
	scala.tools.nsc.typechecker.Typers$Typer.typedStat$1(Typers.scala:6119)
	scala.tools.nsc.typechecker.Typers$Typer.$anonfun$typedStats$8(Typers.scala:3410)
	scala.tools.nsc.typechecker.Typers$Typer.typedStats(Typers.scala:3410)
	scala.tools.nsc.typechecker.Typers$Typer.typedBlock(Typers.scala:2564)
	scala.tools.nsc.typechecker.Typers$Typer.typedOutsidePatternMode$1(Typers.scala:5960)
	scala.tools.nsc.typechecker.Typers$Typer.typed1(Typers.scala:5995)
	scala.tools.nsc.typechecker.Typers$Typer.typed(Typers.scala:6041)
	scala.tools.nsc.typechecker.Typers$Typer.doTypedFunction(Typers.scala:6130)
	scala.tools.nsc.typechecker.Typers$Typer.typedFunction(Typers.scala:3079)
	scala.tools.nsc.typechecker.Typers$Typer.$anonfun$typed1$105(Typers.scala:5926)
	scala.tools.nsc.typechecker.Typers$Typer.typedFunction$1(Typers.scala:497)
	scala.tools.nsc.typechecker.Typers$Typer.typedOutsidePatternMode$1(Typers.scala:5963)
	scala.tools.nsc.typechecker.Typers$Typer.typed1(Typers.scala:5995)
	scala.tools.nsc.typechecker.Typers$Typer.typed(Typers.scala:6041)
	scala.tools.nsc.typechecker.Typers$Typer.typedArg(Typers.scala:3428)
	scala.tools.nsc.typechecker.Typers$Typer.handlePolymorphicCall$1(Typers.scala:3827)
	scala.tools.nsc.typechecker.Typers$Typer.doTypedApply(Typers.scala:3846)
	scala.tools.nsc.typechecker.Typers$Typer.normalTypedApply$1(Typers.scala:5095)
	scala.tools.nsc.typechecker.Typers$Typer.typedApply$1(Typers.scala:5104)
	scala.tools.nsc.typechecker.Typers$Typer.typed1(Typers.scala:5985)
	scala.tools.nsc.typechecker.Typers$Typer.typed(Typers.scala:6041)
	scala.tools.nsc.typechecker.Typers$Typer.typedStat$1(Typers.scala:6119)
	scala.tools.nsc.typechecker.Typers$Typer.$anonfun$typedStats$8(Typers.scala:3410)
	scala.tools.nsc.typechecker.Typers$Typer.typedStats(Typers.scala:3410)
	scala.tools.nsc.typechecker.Typers$Typer.typedBlock(Typers.scala:2564)
	scala.tools.nsc.typechecker.Typers$Typer.typedOutsidePatternMode$1(Typers.scala:5960)
	scala.tools.nsc.typechecker.Typers$Typer.typed1(Typers.scala:5995)
	scala.tools.nsc.typechecker.Typers$Typer.typed(Typers.scala:6041)
	scala.tools.nsc.typechecker.Typers$Typer.typedIf$1(Typers.scala:6130)
	scala.tools.nsc.typechecker.Typers$Typer.typedOutsidePatternMode$1(Typers.scala:5961)
	scala.tools.nsc.typechecker.Typers$Typer.typed1(Typers.scala:5995)
	scala.tools.nsc.typechecker.Typers$Typer.typed(Typers.scala:6041)
	scala.tools.nsc.typechecker.Typers$Typer.doTypedFunction(Typers.scala:6130)
	scala.tools.nsc.typechecker.Typers$Typer.typedFunction(Typers.scala:3079)
	scala.tools.nsc.typechecker.Typers$Typer.$anonfun$typed1$105(Typers.scala:5926)
	scala.tools.nsc.typechecker.Typers$Typer.typedFunction$1(Typers.scala:497)
	scala.tools.nsc.typechecker.Typers$Typer.typedOutsidePatternMode$1(Typers.scala:5963)
	scala.tools.nsc.typechecker.Typers$Typer.typed1(Typers.scala:5995)
	scala.tools.nsc.typechecker.Typers$Typer.typed(Typers.scala:6041)
	scala.tools.nsc.typechecker.Typers$Typer.typedArg(Typers.scala:3428)
	scala.tools.nsc.typechecker.Typers$Typer.handlePolymorphicCall$1(Typers.scala:3827)
	scala.tools.nsc.typechecker.Typers$Typer.doTypedApply(Typers.scala:3846)
	scala.tools.nsc.typechecker.Typers$Typer.normalTypedApply$1(Typers.scala:5095)
	scala.tools.nsc.typechecker.Typers$Typer.typedApply$1(Typers.scala:5104)
	scala.tools.nsc.typechecker.Typers$Typer.typed1(Typers.scala:5985)
	scala.tools.nsc.typechecker.Typers$Typer.typed(Typers.scala:6041)
	scala.tools.nsc.typechecker.Typers$Typer.typedStat$1(Typers.scala:6119)
	scala.tools.nsc.typechecker.Typers$Typer.$anonfun$typedStats$8(Typers.scala:3410)
	scala.tools.nsc.typechecker.Typers$Typer.typedStats(Typers.scala:3410)
	scala.tools.nsc.typechecker.Typers$Typer.typedTemplate(Typers.scala:2064)
	scala.tools.nsc.typechecker.Typers$Typer.typedClassDef(Typers.scala:1895)
	scala.tools.nsc.typechecker.Typers$Typer.typed1(Typers.scala:5951)
	scala.tools.nsc.typechecker.Typers$Typer.typed(Typers.scala:6041)
	scala.tools.nsc.typechecker.Typers$Typer.typedStat$1(Typers.scala:6119)
	scala.tools.nsc.typechecker.Typers$Typer.$anonfun$typedStats$8(Typers.scala:3410)
	scala.tools.nsc.typechecker.Typers$Typer.typedStats(Typers.scala:3410)
	scala.tools.nsc.typechecker.Typers$Typer.typedPackageDef$1(Typers.scala:5634)
	scala.tools.nsc.typechecker.Typers$Typer.typed1(Typers.scala:5954)
	scala.tools.nsc.typechecker.Typers$Typer.typed(Typers.scala:6041)
	scala.tools.nsc.typechecker.Analyzer$typerFactory$TyperPhase.apply(Analyzer.scala:112)
	scala.tools.nsc.Global$GlobalPhase.applyPhase(Global.scala:454)
	scala.tools.nsc.interactive.Global$TyperRun.applyPhase(Global.scala:1354)
	scala.tools.nsc.interactive.Global$TyperRun.typeCheck(Global.scala:1347)
	scala.tools.nsc.interactive.Global.typeCheck(Global.scala:671)
	scala.meta.internal.pc.PcCollector.<init>(PcCollector.scala:29)
	scala.meta.internal.pc.PcSemanticTokensProvider$Collector$.<init>(PcSemanticTokensProvider.scala:18)
	scala.meta.internal.pc.PcSemanticTokensProvider.Collector$lzycompute$1(PcSemanticTokensProvider.scala:18)
	scala.meta.internal.pc.PcSemanticTokensProvider.Collector(PcSemanticTokensProvider.scala:18)
	scala.meta.internal.pc.PcSemanticTokensProvider.provide(PcSemanticTokensProvider.scala:71)
	scala.meta.internal.pc.ScalaPresentationCompiler.$anonfun$semanticTokens$1(ScalaPresentationCompiler.scala:151)
